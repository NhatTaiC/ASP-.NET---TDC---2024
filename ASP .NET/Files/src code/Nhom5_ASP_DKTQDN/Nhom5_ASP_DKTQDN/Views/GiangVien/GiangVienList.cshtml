@model IEnumerable<Nhom5_ASP_DKTQDN.Models.GiangVien>
@using X.PagedList
@using X.PagedList.Mvc.Core
@{
	ViewData["Title"] = "GiangVienList";
	Layout = "~/Views/Shared/_Layout - Admin.cshtml";
}

<h1>Danh sách giảng viên</h1>

<p>
	<a asp-action="CreateGiangVien" class="btn btn-primary">Thêm Giảng Viên</a>
</p>
<table class="table">
	<thead>
		<tr>
			<th>
				Mã giảng viên
			</th>
			<th>
				Tên giảng viên
			</th>
			<th>
				Số điện thoại
			</th>
			<th>
				Tên khoa
			</th>
			@* <th>
				@Html.DisplayNameFor(model => model.IsDeleted)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.CreatedBy)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.CreatedAt)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.UpdatedBy)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.UpdatedAt)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.IdKhoaNavigation)
			</th> *@
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.MaGiangVien)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.TenGiangVien)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.SoDienThoai)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.IdKhoaNavigation.TenKhoa)
				</td>
				@* <td>
					@Html.DisplayFor(modelItem => item.IsDeleted)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.CreatedBy)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.CreatedAt)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.UpdatedBy)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.UpdatedAt)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.IdKhoaNavigation.Id)
				</td> *@
				<td>
					<a asp-action="EditGiangVien" asp-route-id="@item.Id" class="btn btn-primary">Sửa</a>
						<a onclick="confirmDelete(@item.Id)" class="btn btn-danger">Xóa</a>
				</td>
			</tr>
		}
	</tbody>
</table>
@Html.PagedListPager((IPagedList)Model, page => Url.Action("GiangVienList",
			new { page = page }),
			new X.PagedList.Mvc.Core.PagedListRenderOptions
		{
			ContainerDivClasses = new[] { "navigation" },
			LiElementClasses = new[] { "page-item" },
			PageClasses = new[] { "page-link" }
		}
		)
@{
	var SuccessMessageDeleteGV = TempData["SuccessMessageDeleteGV"] as string;
	var SuccessMessageCreateGV = TempData["SuccessMessageCreateGV"] as string;
	var SuccessMessageUpdateGV = TempData["SuccessMessageUpdateGV"] as string;
}

@if (!string.IsNullOrEmpty(SuccessMessageCreateGV))
{
						<script>
							Swal.fire({
								title: 'Thông báo',
								text: 'Thêm thành công!',
								icon: 'success',
								confirmButtonText: 'Đóng'
							});
						</script>
}

@if (!string.IsNullOrEmpty(SuccessMessageUpdateGV))
{
					<script>
						Swal.fire({
							title: 'Thông báo',
							text: 'Sửa thành công!',
							icon: 'success',
							confirmButtonText: 'Đóng'
						});
					</script>
}
@if (!string.IsNullOrEmpty(SuccessMessageDeleteGV))
{
						<script>
							Swal.fire({
								title: 'Thông báo',
								text: 'Xóa thành công!',
								icon: 'success',
								confirmButtonText: 'Đóng'
							});
						</script>
}
<script>
	function confirmDelete(id) {
		Swal.fire({
			title: 'Bạn có chắc chắn muốn xóa?',
			text: "Hành động này không thể hoàn tác!",
			icon: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#3085d6',
			cancelButtonColor: '#d33',
			confirmButtonText: 'Xác nhận',
			cancelButtonText: 'Hủy'
		}).then((result) => {
			if (result.isConfirmed) {
				window.location.href = '/GiangVien/DeleteGiangVien/' + id;
			}
		});
	}
</script>